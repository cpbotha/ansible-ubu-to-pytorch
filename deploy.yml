# ansible to configure clean ubuntu 18.04 node with CUDA10 + miniconda +
# PyTorch + fastai, courtesy of Charl P. Botha and vxlabs.com 2018

# 0. register on the NVIDIA dev site and download the two CUDNN 7.4 or
#    later DEBs. These should go in the downloads/ subdir of this
#    repo. Ensure that the names in vars.yml match your downloads.
#    - everything in downloads/ will be copied over to ~/Downloads. Use this!
# 1. The destination machine should have Ubuntu 18.04 installed. Also,
#    ssh your_user@machine should let you in without
#    password. your_user should be able to sudo.
# 2. edit vars.yml -- change user to your login and sudo user on destination machine
# 3. edit inventory.cfg -- set the destination machine IP number / hostname under [app]
# 4. ansible-playbook -i inventory.cfg deploy.yml

---
- name: Prepare homedir
  hosts: app
  become: no
  user: "{{ user }}"
  vars_files:
    - vars.yml

  tasks:
    - name: Push over my Emacs configuration
      synchronize:
        # lots of symlinks, rather copy the files they point to
        copy_links: yes
        src: ~/.emacs.d
        dest: "{{ home }}/"
    
    - name: Push over tmux configuration
      template:
        src: configs/.tmux.conf
        dest: "{{ home }}/.tmux.conf"
    
    # this will copy the contents of downloads/ over here into ~/Downloads/ on the remote
    - name: Copy contents of downloads (including CUDNN debs) to remote ~/Downloads
      copy:
        src: downloads/
        dest: "{{ home }}/Downloads"
        

- name: Basic system setup
  hosts: app
  become: yes
  user: "{{ user }}"
  vars_files:
    - vars.yml

  tasks:
    - name: Add Emacs 26 PPA
      apt_repository:
        repo: ppa:kelleyk/emacs

    # do the equivalent of apt-get update && apt-get upgrade
    - name: Make sure whole system is up to date
      action: apt upgrade=yes update-cache=yes

    # https://docs.ansible.com/ansible/latest/modules/apt_module.html
    - name: Install required system packages
      apt:
        name: "{{ packages }}"
      vars:
        packages:
        - apt-utils
        - build-essential
        - curl
        - dkms
        - htop
        - tmux
        - joe
        - locales
        - mosh
        - p7zip-full
        - software-properties-common
        - unzip
        - zip
        - emacs26
        - emacs26-el

    # some systems, e.g. those on nvidia-docker, already have CUDA installed
    # ansible-playbook -i inventory.cfg deploy.yml --skip-tags "cuda"
    - name: Add NVIDIA CUDA key
      tags: cuda
      apt_key:
        url: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
        
    - name: Install NVIDIA CUDA 10 network deb from the network
      tags: cuda
      apt:
        deb: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.0.130-1_amd64.deb

    - name: Install the rest of CUDA based on network deb's config
      tags: cuda
      apt:
        update_cache: yes
        name: cuda

    - name: Install CUDNN debs
      action: apt deb={{ item }} state=present
      with_items:
        - "{{ downloads_dir }}/{{ cudnn }}"
        - "{{ downloads_dir }}/{{ cudnn_dev }}"        

- name: Setup miniconda3 with PyTorch and fastai
  hosts: app
  become: no
  user: "{{ user }}"
  # you can run ONLY this play by doing:
  # ansible-playbook -i inventory.cfg deploy.yml --tags "miniconda3"
  tags: miniconda3
  vars_files:
    - vars.yml

  tasks:
    # this will only download if not already there
    - name: Download miniconda3 installer
      get_url:
        url: https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
        dest: "{{ home }}/Downloads/Miniconda3-latest-Linux-x86_64.sh"

    # this will only run if miniconda3 is not already there yet (creates: ...)
    - name: Install miniconda3
      command: "/bin/bash {{ home }}/Downloads/Miniconda3-latest-Linux-x86_64.sh -b"
      args:
        creates: "{{ home }}/miniconda3"

    - name: Add conda config to .bashrc
      lineinfile:
        path: "{{ home }}/.bashrc"
        line: ". ~/miniconda3/etc/profile.d/conda.sh"

    # only do this if this is a new miniconda3 installation
    - name: Install first PyTorch environment
      command: "{{ home }}/miniconda3/bin/conda create -y -c mingfeima -n pt python=3.7 numpy mkl mkldnn scikit-learn pandas ipython"
      args:
        creates: "{{ home }}/miniconda3/envs/pt"

    # previous version of this script installed my own build of 1.0 preview as 1.0 was not out yet
    # make sure to uninstall that, then install official conda packages in next step
    - name: Uninstall previous torch wheel installation
      command: "{{ home }}/miniconda3/envs/pt/bin/pip uninstall -y torch"

    - name: Install PyTorch 1.0 and friends using conda into pt environment
      command: "{{ home }}/miniconda3/bin/conda install -y -n pt pytorch torchvision cuda100 -c pytorch"

    - name: Install / upgrade to latest fastai
      command: "{{ home }}/miniconda3/envs/pt/bin/pip install --upgrade fastai"

    # PyTorch wheel needs to have LD_LIBRARY_PATH set else it can't find MKL and friends
    # - name: Configure LD_LIBRARY_PATH for the PyTorch wheel
    #   lineinfile:
    #     path: "{{ home }}/miniconda3/envs/pt/etc/conda/activate.d/ld_library_path.sh"
    #     create: yes
    #     line: "export LD_LIBRARY_PATH=$CONDA_PREFIX/lib"

